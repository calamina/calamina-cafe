---
import { Image } from "astro:assets";
import type { Project } from "../../models/Project";
import IconImg from "../IconImg.astro";

const { projects, type } = Astro.props;

export interface Props {
  projects: Project[];
  type: string;
}

const url = "/projects/" + type + "/";
const imgs = Object.entries(
  type === "web"
    ? import.meta.glob<{ eager: true }>(
        "/src/assets/img/content/projects/web/*.avif",
      )
    : import.meta.glob<{ eager: true }>(
        "/src/assets/img/content/projects/phone/*.avif",
      ),
);

const getImg = (name: string) =>
  imgs.filter((lel) => lel[0].includes(name)).map((test) => test[0])[0];
---

<div class="wrapper">
  <!-- <h2>{{ type }}</h2> -->
  <div class="projects">
    {
      projects.map((project) => (
        <a class="project" href={url + project.name}>
          <Image
            class="projectImg"
            src={getImg(project.name)}
            alt={project.name + " cover"}
            width={300}
            height={300}
            loading={"lazy"}
            format={"avif"}
          />
          <div class="tags">
            {project.tech?.tools?.map((tag) => (
              <p class="tag">{tag}</p>
            ))}
          </div>
          <div class="info">
            <p class="name">
              {project.name}
              {project.online !== undefined && (
                <span
                  class="status"
                  class:list={[{ online: project.online }]}
                />
              )}
            </p>
            <button>
              <IconImg name="tabler:dots-diagonal" class="iconImg" />
            </button>
          </div>
        </a>
      ))
    }
  </div>
</div>

<style lang="scss" scoped>
  .wrapper {
    width: 100%;
    display: flex;
    flex-flow: column;
    gap: 0.5rem;
  }

  h2 {
    font-size: 3rem;
    line-height: 3rem;
    text-transform: capitalize;
  }

  .projects {
    display: flex;
    flex-flow: column;
    gap: 1rem;
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  }

  .project {
    position: relative;
    display: flex;
    flex-flow: column;
    width: 100%;
    gap: 0.25rem;
    overflow: hidden;
    border-radius: 0.5rem;
    text-transform: capitalize;
    align-items: start;

    &:hover {
      background-color: inherit;

      button {
        background-color: var(--highlight);
      }

      button > * {
        transform: rotate(180deg);
        transition: transform 0.3s;
      }
    }
  }

  .iconImg {
    transition: transform 0.3s;
  }

  .projectImg {
    max-height: 15rem;
    width: 100%;
    border-radius: 0.5rem;
    object-fit: cover;
    object-fit: contain;
    background-color: var(--bg-darker0);
    flex: 1;
    overflow: hidden;
  }

  .info {
    width: 100%;
    display: flex;
    gap: 0.25rem;
  }

  button {
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.5rem;
    width: 2.5rem;
    height: auto;
    background-color: var(--bg-darker0);
  }

  .name {
    padding: 0.25rem 0.5rem;
    display: block;
    width: 100%;
    background-color: var(--bg-darker0);
    border-radius: 0.5rem;
    position: relative;
  }

  .tags {
    display: flex;
    display: none;
    right: 0;
    background-color: var(--bg-darker0);
    border-radius: 0.5rem;
  }

  .data {
    width: 100%;
    display: flex;
    align-items: end;
    gap: 0.25rem;
  }

  .status {
    position: absolute;
    right: 0.25rem;
    top: 0.25rem;
    width: 0.5rem;
    height: 0.5rem;
    border-radius: 0.5rem;
    background-color: var(--bg-darker);

    &.online {
      background-color: var(--highlight);
    }
  }
</style>
