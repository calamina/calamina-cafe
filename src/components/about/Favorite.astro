---
import LinkImageLabel from "../LinkImageLabel.vue";
import type { Media } from "../../models/Media";
import { Image } from "astro:assets";

export interface Props {
  title: string;
  medias: Media[];
  size?: "large" | "full";
}

const { medias, title, size } = Astro.props;

const span = size && (size === "large" ? "large" : "full");
const display = size && (size === "large" ? "gridtwo" : "gridthree");
---

<div class="wrapper" class:list={[span]}>
  <div class="header">
    <h3>{title}</h3>
    <span>{medias.length}</span>
  </div>
  <div class="medias" class:list={[display]}>
    {
      medias.map((media) => (
        <LinkImageLabel url={media.url} label={media.label} src={media.src}>
          <Image
            src={media.src}
            alt={media.label + " cover"}
            width={50}
            height={50}
            format={"avif"}
          />
        </LinkImageLabel>
      ))
    }
  </div>
</div>

<style scoped>
  .wrapper {
    display: flex;
    flex-flow: column;
    background-color: var(--bg);
    border-radius: 0.5rem;

    @media (max-width: 1280px) {
      grid-column: span 3;
    }
  }

  .header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-bottom: 1px solid var(--bg-darker);
    padding: 0.5rem;
    gap: 0.5rem;
  }

  span {
    display: flex;
    align-items: center;
    height: 100%;
    padding: 0 0.5rem;
    color: var(--color-light);
  }

  h3 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.25rem 1rem;
    border-radius: 0.5rem;
    background-color: var(--bg-darker0);

    &::before {
      content: "";
      display: block;
      width: 0.4rem;
      height: 0.4rem;
      border-radius: 50%;
      background-color: var(--highlight);
    }
  }

  img {
    border-radius: 0.5rem;
    object-fit: cover;
    height: 2.5rem;
    width: 2.5rem;
    flex-shrink: 0;
  }

  .medias {
    display: flex;
    flex-flow: column;
    gap: 0.5rem;
    width: 100%;
    padding: 0.5rem;

    &.gridtwo {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    &.gridthree {
      display: grid;
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }
  }

  .large {
    grid-column: span 2;

    @media (max-width: 1280px) {
      grid-column: 1;
    }
  }

  .full {
    grid-column: span 3;

    @media (max-width: 1280px) {
      grid-column: 1;
    }
  }
</style>
